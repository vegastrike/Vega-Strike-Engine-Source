/*
 * OPC_BaseModel.h
 *
 * Vega Strike - Space Simulation, Combat and Trading
 * Copyright (C) 2001-2025 The Vega Strike Contributors:
 * Creator: Daniel Horn
 * Original development team: As listed in the AUTHORS file
 * Current development team: Roy Falk, Benjamen R. Meyer, Stephen G. Tuggy
 *
 *
 * https://github.com/vegastrike/Vega-Strike-Engine-Source
 *
 * This file is part of Vega Strike.
 *
 * Vega Strike is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Vega Strike is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Vega Strike.  If not, see <https://www.gnu.org/licenses/>.
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
 *	OPCODE - Optimized Collision Detection
 *	Copyright (C) 2001 Pierre Terdiman
 *	Homepage: http://www.codercorner.com/Opcode.htm
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	Contains base model interface.
 *	\file		OPC_BaseModel.h
 *	\author		Pierre Terdiman
 *	\date		May, 18, 2003
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Updated by Stephen G. Tuggy 2021-07-03
 * Updated by Stephen G. Tuggy 2022-01-06
 * Updated by Benjamen R. Meyer 2023-05-27
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Include Guard
#ifndef VEGA_STRIKE_ENGINE_CMD_COLLSION2_ICE_OPC_BASEMODEL_H
#define VEGA_STRIKE_ENGINE_CMD_COLLSION2_ICE_OPC_BASEMODEL_H

//! Model creation structure
struct OPCODE_API OPCODECREATE {
    //! Constructor
    OPCODECREATE();

    MeshInterface *mIMesh;            //!< Mesh interface (access to triangles & vertices) (*)
    BuildSettings mSettings;        //!< Builder's settings
    bool mNoLeaf;        //!< true => discard leaf nodes (else use a normal tree)
    bool mQuantized;        //!< true => quantize the tree (else use a normal tree)
#ifdef __MESHMERIZER_H__
    bool					mCollisionHull;	//!< true => use convex hull + GJK
#endif // __MESHMERIZER_H__
    bool mKeepOriginal;    //!< true => keep a copy of the original tree (debug purpose)
    bool mCanRemap;        //!< true => allows OPCODE to reorganize client arrays

    // (*) This pointer is saved internally and used by OPCODE until collision structures are released,
    // so beware of the object's lifetime.
};

enum ModelFlag {
    OPC_QUANTIZED = (1 << 0),    //!< Compressed/uncompressed tree
    OPC_NO_LEAF = (1 << 1),    //!< Leaf/NoLeaf tree
    OPC_SINGLE_NODE = (1 << 2)    //!< Special case for 1-node models
};

class OPCODE_API BaseModel {
public:
    // Constructor/Destructor
    BaseModel();
    virtual                                ~BaseModel();

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Builds a collision model.
     *	\param		create		[in] model creation structure
     *	\return		true if success
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool Build(const OPCODECREATE &create) = 0;

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Gets the number of bytes used by the tree.
     *	\return		amount of bytes used
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual size_t GetUsedBytes() const = 0;

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Refits the collision model. This can be used to handle dynamic meshes. Usage is:
     *	1. modify your mesh vertices (keep the topology constant!)
     *	2. refit the tree (call this method)
     *	\return		true if success
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool Refit();

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Gets the source tree.
     *	\return		generic tree
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    inline_    const AABBTree *GetSourceTree() const {
        return mSource;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Gets the tree.
     *	\return		the collision tree
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    inline_    const AABBOptimizedTree *GetTree() const {
        return mTree;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Gets the tree.
     *	\return		the collision tree
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    inline_            AABBOptimizedTree *GetTree() {
        return mTree;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Gets the number of nodes in the tree.
     *	Should be 2*N-1 for normal trees and N-1 for optimized ones.
     *	\return		number of nodes
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    inline_            uint32_t GetNbNodes() const {
        return mTree->GetNbNodes();
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Checks whether the tree has leaf nodes or not.
     *	\return		true if the tree has leaf nodes (normal tree), else false (optimized tree)
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    inline_            BOOL HasLeafNodes() const {
        return !(mModelCode & OPC_NO_LEAF);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Checks whether the tree is quantized or not.
     *	\return		true if the tree is quantized
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    inline_            BOOL IsQuantized() const {
        return mModelCode & OPC_QUANTIZED;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Checks whether the model has a single node or not. This special case must be handled separately.
     *	\return		true if the model has only 1 node
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    inline_            BOOL HasSingleNode() const {
        return mModelCode & OPC_SINGLE_NODE;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Gets the model's code.
     *	\return		model's code
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    inline_            uint32_t GetModelCode() const {
        return mModelCode;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Gets the mesh interface.
     *	\return		mesh interface
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    inline_    const MeshInterface *GetMeshInterface() const {
        return mIMesh;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Sets the mesh interface.
     *	\param		imesh		[in] mesh interface
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    inline_            void SetMeshInterface(const MeshInterface *imesh) {
        mIMesh = imesh;
    }

protected:
    const MeshInterface *mIMesh;            //!< User-defined mesh interface
    uint32_t mModelCode;        //!< Model code = combination of ModelFlag(s)
    AABBTree *mSource;        //!< Original source tree
    AABBOptimizedTree *mTree;            //!< Optimized tree owned by the model
    // Internal methods
    void ReleaseBase();
    bool CreateTree(bool no_leaf, bool quantized);
};

#endif //VEGA_STRIKE_ENGINE_CMD_COLLSION2_ICE_OPC_BASEMODEL_H
