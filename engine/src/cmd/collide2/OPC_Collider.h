/*
 * OPC_Collider.h
 *
 * Vega Strike - Space Simulation, Combat and Trading
 * Copyright (C) 2001-2025 The Vega Strike Contributors:
 * Creator: Daniel Horn
 * Original development team: As listed in the AUTHORS file
 * Current development team: Roy Falk, Benjamen R. Meyer, Stephen G. Tuggy
 *
 *
 * https://github.com/vegastrike/Vega-Strike-Engine-Source
 *
 * This file is part of Vega Strike.
 *
 * Vega Strike is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Vega Strike is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Vega Strike.  If not, see <https://www.gnu.org/licenses/>.
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
 *	OPCODE - Optimized Collision Detection
 *	Copyright (C) 2001 Pierre Terdiman
 *	Homepage: http://www.codercorner.com/Opcode.htm
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	Contains base collider class.
 *	\file		OPC_Collider.h
 *	\author		Pierre Terdiman
 *	\date		June, 2, 2001
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Updated by Stephen G. Tuggy 2021-07-03
 * Updated by Stephen G. Tuggy 2022-01-06
 * Updated by Benjamen R. Meyer 2023-05-27
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Include Guard
#ifndef VEGA_STRIKE_ENGINE_CMD_COLLSION2_OPC_COLLIDER_H
#define VEGA_STRIKE_ENGINE_CMD_COLLSION2_OPC_COLLIDER_H

enum CollisionFlag {
    OPC_FIRST_CONTACT = (1 << 0),        //!< Report all contacts (false) or only first one (true)
    OPC_TEMPORAL_COHERENCE = (1 << 1),        //!< Use temporal coherence or not
    OPC_CONTACT = (1 << 2),        //!< Final contact status after a collision query
    OPC_TEMPORAL_HIT = (1 << 3),        //!< There has been an early exit due to temporal coherence
    OPC_NO_PRIMITIVE_TESTS =
    (1 << 4),        //!< Keep or discard primitive-bv tests in leaf nodes (volume-mesh queries)

    OPC_CONTACT_FOUND = OPC_FIRST_CONTACT | OPC_CONTACT,
    OPC_TEMPORAL_CONTACT = OPC_TEMPORAL_HIT | OPC_CONTACT,

    OPC_FORCE_DWORD = 0x7fffffff
};

class OPCODE_API Collider {
public:
    // Constructor / Destructor
    Collider();
    virtual                                ~Collider();

    // Collision report

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Gets the last collision status after a collision query.
     *	\return		true if a collision occured
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    inline_                BOOL GetContactStatus() const {
        return mFlags & OPC_CONTACT;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Gets the "first contact" mode.
     *	\return		true if "first contact" mode is on
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    inline_                BOOL FirstContactEnabled() const {
        return mFlags & OPC_FIRST_CONTACT;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Gets the temporal coherence mode.
     *	\return		true if temporal coherence is on
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    inline_                BOOL TemporalCoherenceEnabled() const {
        return mFlags & OPC_TEMPORAL_COHERENCE;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Checks a first contact has already been found.
     *	\return		true if a first contact has been found and we can stop a query
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    inline_                BOOL ContactFound() const {
        return (mFlags & OPC_CONTACT_FOUND) == OPC_CONTACT_FOUND;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Checks there's been an early exit due to temporal coherence;
     *	\return		true if a temporal hit has occured
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    inline_                BOOL TemporalHit() const {
        return mFlags & OPC_TEMPORAL_HIT;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Checks primitive tests are enabled;
     *	\return		true if primitive tests must be skipped
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    inline_                BOOL SkipPrimitiveTests() const {
        return mFlags & OPC_NO_PRIMITIVE_TESTS;
    }

    // Settings

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Reports all contacts (false) or first contact only (true)
     *	\param		flag		[in] true for first contact, false for all contacts
     *	\see		SetTemporalCoherence(bool flag)
     *	\see		ValidateSettings()
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    inline_                void SetFirstContact(bool flag) {
        if (flag) {
            mFlags |= OPC_FIRST_CONTACT;
        } else {
            mFlags &= ~OPC_FIRST_CONTACT;
        }
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Enable/disable temporal coherence.
     *	\param		flag		[in] true to enable temporal coherence, false to discard it
     *	\see		SetFirstContact(bool flag)
     *	\see		ValidateSettings()
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    inline_                void SetTemporalCoherence(bool flag) {
        if (flag) {
            mFlags |= OPC_TEMPORAL_COHERENCE;
        } else {
            mFlags &= ~OPC_TEMPORAL_COHERENCE;
        }
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Enable/disable primitive tests.
     *	\param		flag		[in] true to enable primitive tests, false to discard them
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    inline_                void SetPrimitiveTests(bool flag) {
        if (!flag) {
            mFlags |= OPC_NO_PRIMITIVE_TESTS;
        } else {
            mFlags &= ~OPC_NO_PRIMITIVE_TESTS;
        }
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Validates current settings. You should call this method after all the settings / callbacks have been defined for a collider.
     *	\return		nullptr if everything is ok, else a string describing the problem
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const char *ValidateSettings() = 0;

protected:
    uint32_t mFlags;            //!< Bit flags
    const BaseModel *mCurrentModel;    //!< Current model for collision query (owner of touched faces)
    // User mesh interface
    const MeshInterface *mIMesh;            //!< User-defined mesh interface

    // Internal methods
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Setups current collision model
     *	\param		model	[in] current collision model
     *	\return		TRUE if success
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    inline_                BOOL Setup(const BaseModel *model) {
        // Keep track of current model
        mCurrentModel = model;
        if (!mCurrentModel) {
            return FALSE;
        }

        mIMesh = model->GetMeshInterface();
        return mIMesh != nullptr;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Initializes a query
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual inline_        void InitQuery() {
        mFlags &= ~OPC_TEMPORAL_CONTACT;
    }
};

#endif //VEGA_STRIKE_ENGINE_CMD_COLLSION2_OPC_COLLIDER_H
