/*
 * OPC_VolumeCollider.h
 *
 * Vega Strike - Space Simulation, Combat and Trading
 * Copyright (C) 2001-2025 The Vega Strike Contributors:
 * Creator: Daniel Horn
 * Original development team: As listed in the AUTHORS file
 * Current development team: Roy Falk, Benjamen R. Meyer, Stephen G. Tuggy
 *
 *
 * https://github.com/vegastrike/Vega-Strike-Engine-Source
 *
 * This file is part of Vega Strike.
 *
 * Vega Strike is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Vega Strike is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Vega Strike.  If not, see <https://www.gnu.org/licenses/>.
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
 *	OPCODE - Optimized Collision Detection
 *	Copyright (C) 2001 Pierre Terdiman
 *	Homepage: http://www.codercorner.com/Opcode.htm
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	Contains base volume collider class.
 *	\file		OPC_VolumeCollider.h
 *	\author		Pierre Terdiman
 *	\date		June, 2, 2001
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Updated by Stephen G. Tuggy 2021-07-03
 * Updated by Stephen G. Tuggy 2022-01-06
 * Updated by Benjamen R. Meyer 2023-05-27
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Include Guard
#ifndef VEGA_STRIKE_ENGINE_CMD_COLLSION2_OPC_VOLUMECOLLIDER_H
#define VEGA_STRIKE_ENGINE_CMD_COLLSION2_OPC_VOLUMECOLLIDER_H

struct OPCODE_API VolumeCache {
    VolumeCache() : Model(nullptr) {
    }

    ~VolumeCache() {
    }

    Container TouchedPrimitives;    //!< Indices of touched primitives
    const BaseModel *Model;                //!< Owner
};

class OPCODE_API VolumeCollider : public Collider {
public:
    // Constructor / Destructor
    VolumeCollider();
    virtual                                ~VolumeCollider() = 0;

    // Collision report

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Gets the number of touched primitives after a collision query.
     *	\see		GetContactStatus()
     *	\see		GetTouchedPrimitives()
     *	\return		the number of touched primitives
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    inline_                uint32_t GetNbTouchedPrimitives() const {
        return mTouchedPrimitives ? mTouchedPrimitives->GetNbEntries() : 0;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Gets the list of touched primitives after a collision query.
     *	\see		GetContactStatus()
     *	\see		GetNbTouchedPrimitives()
     *	\return		the list of touched primitives (primitive indices)
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    inline_        const uint32_t *GetTouchedPrimitives() const {
        return mTouchedPrimitives ? mTouchedPrimitives->GetEntries() : nullptr;
    }

    // Stats

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Stats: gets the number of Volume-BV overlap tests after a collision query.
     *	\see		GetNbVolumePrimTests()
     *	\return		the number of Volume-BV tests performed during last query
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    inline_                uint32_t GetNbVolumeBVTests() const {
        return mNbVolumeBVTests;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Stats: gets the number of Volume-Triangle overlap tests after a collision query.
     *	\see		GetNbVolumeBVTests()
     *	\return		the number of Volume-Triangle tests performed during last query
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    inline_                uint32_t GetNbVolumePrimTests() const {
        return mNbVolumePrimTests;
    }

    // Settings

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Validates current settings. You should call this method after all the settings / callbacks have been defined for a collider.
     *	\return		nullptr if everything is ok, else a string describing the problem
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    override(Collider) const char *ValidateSettings();

protected:
    // Touched primitives
    Container *mTouchedPrimitives;    //!< List of touched primitives

    // Dequantization coeffs
    Point mCenterCoeff;
    Point mExtentsCoeff;
    // Stats
    uint32_t mNbVolumeBVTests;    //!< Number of Volume-BV tests
    uint32_t mNbVolumePrimTests;    //!< Number of Volume-Primitive tests
    // Internal methods
    void _Dump(const AABBCollisionNode *node);
    void _Dump(const AABBNoLeafNode *node);
    void _Dump(const AABBQuantizedNode *node);
    void _Dump(const AABBQuantizedNoLeafNode *node);

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Initializes a query
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    override(Collider) inline_    void InitQuery() {
        // Reset stats & contact status
        mNbVolumeBVTests = 0;
        mNbVolumePrimTests = 0;
        Collider::InitQuery();
    }

    inline_                BOOL IsCacheValid(VolumeCache &cache) {
        // We're going to do a volume-vs-model query.
        if (cache.Model != mCurrentModel) {
            // Cached list was for another model so we can't keep it
            // Keep track of new owner and reset cache
            cache.Model = mCurrentModel;
            return FALSE;
        } else {
            // Same models, no problem
            return TRUE;
        }
    }
};

#endif //VEGA_STRIKE_ENGINE_CMD_COLLSION2_OPC_VOLUMECOLLIDER_H
