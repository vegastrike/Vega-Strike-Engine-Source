/*
 * IceLSS.h
 *
 * Vega Strike - Space Simulation, Combat and Trading
 * Copyright (C) 2001-2025 The Vega Strike Contributors:
 * Creator: Daniel Horn
 * Original development team: As listed in the AUTHORS file
 * Current development team: Roy Falk, Benjamen R. Meyer, Stephen G. Tuggy
 *
 *
 * https://github.com/vegastrike/Vega-Strike-Engine-Source
 *
 * This file is part of Vega Strike.
 *
 * Vega Strike is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Vega Strike is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Vega Strike.  If not, see <https://www.gnu.org/licenses/>.
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	Contains code for line-swept spheres.
 *	\file		IceLSS.h
 *	\author		Pierre Terdiman
 *	\date		April, 4, 2000
 *
 *  Updated by Stephen G. Tuggy 2022-01-06
 *  Updated by Benjamen R. Meyer 2023-05-27
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Include Guard
#ifndef VEGA_STRIKE_ENGINE_CMD_COLLSION2_ICE_LSS_H
#define VEGA_STRIKE_ENGINE_CMD_COLLSION2_ICE_LSS_H

class ICEMATHS_API LSS : public Segment {
public:
    //! Constructor
    inline_ LSS() {
    }
    //! Constructor
    inline_ LSS(const Segment &seg, float radius) : Segment(seg), mRadius(radius) {
    }
    //! Destructor
    inline_            ~LSS() {
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Computes an OBB surrounding the LSS.
     *	\param		box		[out] the OBB
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void ComputeOBB(OBB &box);

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Tests if a point is contained within the LSS.
     *	\param		pt	[in] the point to test
     *	\return		true if inside the LSS
     *	\warning	point and LSS must be in same space
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    inline_    bool Contains(const Point &pt) const {
        return SquareDistance(pt) <= mRadius * mRadius;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Tests if a sphere is contained within the LSS.
     *	\param		sphere	[in] the sphere to test
     *	\return		true if inside the LSS
     *	\warning	sphere and LSS must be in same space
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    inline_    bool Contains(const Sphere &sphere) {
        float d = mRadius - sphere.mRadius;
        if (d >= 0.0f) {
            return SquareDistance(sphere.mCenter) <= d * d;
        } else {
            return false;
        }
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     *	Tests if an LSS is contained within the LSS.
     *	\param		lss		[in] the LSS to test
     *	\return		true if inside the LSS
     *	\warning	both LSS must be in same space
     */
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    inline_    bool Contains(const LSS &lss) {
        // We check the LSS contains the two spheres at the start and end of the sweep
        return Contains(Sphere(lss.mP0, lss.mRadius)) && Contains(Sphere(lss.mP0, lss.mRadius));
    }

    float mRadius;    //!< Sphere radius
};

#endif //VEGA_STRIKE_ENGINE_CMD_COLLSION2_ICE_LSS_H
